# only need to define a function once.
plot.normal.curve <- function(mu, sd, qleft=NULL, qright=NULL) {
s = sd*4
plot(seq(mu-s,mu+s, by=.01),
dnorm(seq(mu-s,mu+s, by=.01), mean=mu, sd=sd),
type="l", ylab = "density", xlab = "")
if (is.null(qleft) == FALSE) {
x = seq(mu-s, qleft, by=.01)
y = dnorm(x, mean=mu, sd=sd)
polygon( c(mu-s,x,qleft), c(0,y,0), col="red") }
if (is.null(qright) == FALSE) {
x = seq(qright, mu+s, by=.01)
y = dnorm(x, mean=mu, sd=sd)
polygon( c(qright,x,mu+s), c(0,y,0), col="red") }          }
# note: We are specifying the desired figure dimensions in the chunk setup {} with fig.width and fig.height. Units by default are inches, and default figure dimensions are 7" wide by 5 " high.
plot.normal.curve(mu = 0, sd = 1)
# generate 15 random numbers from a normal distribution
# normal distribution has a mean of 6.7, sd of 2
rnorm(n = 15, mean = 6.7, sd = 2)
# generate 15 random numbers from a normal distribution with mean of 6.7, sd of 2
# set seed to 20 so output is reproducible every time
# > note: seed number selected is arbitrary (you can pick anything number you like) but 20 will reproduce output in text narrative above
set.seed(20)
rnorm(n = 15, mean = 6.7, sd = 2)
# probability of a value of 0 or LESS, from a distribution with mean of 1 and sd of 0.8
pnorm(q = 0, mean = 1, sd = 0.8)
# use the function we created above to plot the probability density function and shade the area under the curve to the left of q
plot.normal.curve(mu = 1, sd = 0.8, qleft = 0)
# the shaded area here visualizes the probability given in the previous pnorm line (about 11% of the area under the curve)
# probability of a value of 0 or MORE, from the same distribution
pnorm(q = 0, mean = 1, sd = 0.8, lower.tail = FALSE)
# use the plotting function created above and shade the area under the curve to the right of q
plot.normal.curve(mu = 1, sd = 0.8, qright = 0)
# the shaded area here visualizes the probability given in the previous pnorm line (about 89% of the area under the curve)
# alternative way to get the same value
1 - pnorm(q = 0, mean = 1, sd = 0.8)
qnorm(p = 0.05, mean = 10, sd = 2)
# there is a 5% chance of observing a value of 6.7 or lower from this distribution
plot.normal.curve(mu = 10, sd = 2, qleft = 6.7)
# the shaded area under the curve represents 5% of the probability density function, from the lower tail
plot.normal.curve(mu = 10, sd = 2, qleft = 6.7)
# the shaded area under the curve represents 5% of the probability density function, from the lower tail
qnorm(p = 0.95, mean = 10, sd = 2)
# 95% of the distribution lies below 13.3
qnorm(p = 0.05, mean = 10, sd = 2)
# there is a 5% chance of observing a value of 6.7 or lower from this distribution
plot.normal.curve(mu = 10, sd = 2, qleft = 13.3)
# the shaded area under the curve represents 95% of the probability density function, from the lower tail
1 - pnorm(q = -2.5, mean = 1, sd = 0.8)
pnorm(q = -2.5, mean = 1, sd = 0.8)
1 - pnorm(q = 3, mean = 1, sd = 0.8)
1 - pnorm(q = 3.5, mean = 1, sd = 0.8)
1 - pnorm(q = 4.5, mean = 1, sd = 0.8)
1 - pnorm(q = 3, mean = 1, sd = 0.8)
R1 <- rnorm( x = 10, mean = 4, sd = 1.5)
R1 <- rnorm( 10, mean = 4, sd = 1.5)
summary(R1)
sd(R1)
summary(R1)
sd(R1)
R2 <- rnorm( 100, mean = 4, sd = 1.5)
summary(R2)
sd(R2)
R3 <- rnorm( 1000, mean = 4, sd = 1.5)
summary(R3)
sd(R3)
qnorm (2.5, mean = 50, sd = .5)
qnorm(2.5, mean = 50, sd = .5, lower.tail = TRUE)
qnorm(2.5, mean = 50, sd = .5, lower.tail = TRUE, log.p = F)
pnorm(2.5, mean = 50, sd = .5, lower.tail = TRUE, log.p = F)
qnorm(2.5, mean = 50, sd = .5, lower.tail = TRUE, log.p = F)
qnorm(.025, mean = 50, sd = .5, lower.tail = TRUE, log.p = F)
qnorm(p = 2.5, mean = 50, sd = .5, lower.tail = TRUE, log.p = F)
qnorm( p= .25, mean = 50, sd = .5, lower.tail = F)
qnorm( p= 2.5, mean = 50, sd = .5, lower.tail = F)
qnorm( p= .025, mean = 50, sd = .5, lower.tail = F)
qnorm( p= .025, mean = 50, sd = .5, lower.tail = T)
qnorm( p= .025, mean = 50, sd = 1, lower.tail = F)
qnorm( p= .025, mean = 50, sd = .5, lower.tail = F)
pnorm( q = 50.97998, mean = 50, sd = .5, lower.tail = F)
#Graphing the curve with this area to the right highlited
plot.normal.curve(mu = 50, sd = .5, qleft = 50.97)
#Graphing the curve with this area to the right highlited
plot.normal.curve(mu = 50, sd = .5, qright = 50.97)
heat <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter11/chap11e3Temperature.csv"))
head(heat) # print first several rows in dataset
summary(heat) # preview values in columns
#Piggy Bank For loop
#Saving values for the loop
PiggyBank <- 10
allowance <- 5
gum <- 1.34
weeks <- 8
#The loop itself
for ( i in 1:weeks){
PiggyBank <- (PiggyBank + allowance) - (gum*2)
print(PiggyBank)
}
#Question 3 conservation biology problem
#Assigning values
population <- 2000
years <- 7
#El loop
for ( i in 1: years){
population <- population * .95
print (population)
}
n <- 2500
t <- 12
K <- 10000
r <- .8
n[t] <- 1
for ( i in 1: t){
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
print(n)
}
zeros <- rep(0:18)
zeros <- rep(0,1:18)
zeros <- rep(0,18)
i <- i*3}
for ( i in seq(1,18) ) {
i <- i*3
}
for ( i in seq(1,18) ) {
( i <- i*3)
}
#Changing the first integer from 0 to 1
1 <- zero
print 1:18
for ( i in seq(1,18) ) {
( i <- i*3)
}
3xSequence <- ( i <- i*3)
for ( i in seq(1,18) ) {
Sequence <- ( i <- i*3)
}
for ( i in seq(1,18) ) {
Sequence <- ( i <- i*3)
print Sequence
}
print(Sequence)
for ( i in seq(1,18) ) {
Sequence <- ( i <- i*3)
print(Sequence)
}
for ( i in seq(1,18) ) {
Sequence <- ( i*3)
print(Sequence)
}
for ( i in seq(1:18) ) {
Sequence <- ( i <- i*3)
print(Sequence)
}
for ( i in seq(1:18) ) {
Sequence <- ( i <- i*3)
print(Sequence)
}
for ( i in seq(1:18) ) {
Sequence <- ( i <- 1+(2*i))
print(Sequence)
}
for ( i in 1:18)  {
Sequence <- ( i <- 1+(2*i))
print(Sequence)
}
for ( i in 0:18)  {
Sequence <- ( i <- 1+(2*i))
print(Sequence)
}
for(i in 1:10){
print ("Hi")
}
#The loop itself
for ( i in 1:weeks){
PiggyBank <- (PiggyBank + allowance) - (gum*2)
print(PiggyBank)
}
#El loop
for ( i in 1: years){
population <- population * .95
print (population)
}
# Part II
# 5a creating a vector of 18 zeros
zeros <- rep(0,18)
zeros
i <- i*3
for (i in seq(i:18)){
i <- i*3
}
print(Sequence)
rm(Sequence)
source('C:/Users/TyMcC/Desktop/Comp_Bio/CompBioLabsAndHW/Labs/McCaffrrey_Lab4.R', echo=TRUE)
Sequence
Sequence <- for (i in seq(i:18)){
i <- i*3
print(Sequence)
}
print i
for (i in seq(i:18)){
i <- i*3
print(i)
}
for (i in 1:18 ){
i <- i*3
print(i)
}
for (i in 1:18 ){
i <- (i)*3
print(i)
}
i <- (i)+3
for (i in 1:18 ){
i <- (i)+3
print(i)
}
for (i in 1:18 ){
i <- 1
print(i)
}
for (i in 1:18 ){
i <- 3
print(i)
}
for (i in 1:18 ){
i <- 3*i
print(i)
}
#Question 3, discrete- time logistic growth model
# Part II
# 5a creating a vector of 18 zeros
zeros <- rep(0,18)
for (i in 1:zeros ){
i <- 3*i
print(i)
}
for (i in 1:18 ){
zeros <- 3*zeros
print(i)
}
for (i in 1:zeros ){
zeros <- 3*zeros
print(i)
}
t <- seq(1:12)
for ( i in 1:t){
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
n <- 2500
t <- seq(1:12)
for ( i in 1:t){
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
}
print(n)
n <- 2500
for ( i in 1:12){
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
print(n)
}
for ( i in t){
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
print(n)
}
# Part II
# 5a creating a vector of 18 zeros
zeros <- rep(0,18)
for (i in zeros ){
zeros <- 3*zeros
print(i)
}
# Part II
# 5a creating a vector of 18 zeros
zeros <- rep(0:18)
for (i in zeros ){
zeros <- 3*zeros
print(i)
}
# Part II
# 5a creating a vector of 18 zeros
zeros <- rep(0:18)
# Part II
# 5a creating a vector of 18 zeros
zeros <- rep(0,1:18)
# Part II
# 5a creating a vector of 18 zeros
zeros <- rep.int(0,1:18)
# Part II
# 5a creating a vector of 18 zeros
zeros <- rep.int(0,18)
for (i in zeros ){
zeros <- 3*zeros
print(i)
}
n <- 2500
t <- seq(1:12)
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
t <- 12
for ( i in 1:t){
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
print(n)
}
fib[1] <- 1
#6, creating the fibonacci sequence using a R for loop
n <- 20
fib <- numeric(n)
fib[1] <- 1
#6, creating the fibonacci sequence using a R for loop
n <- 20
fib <- numeric(n)
fib[1] <- 1
fib[2] <- 1
for ( in in 3 : n){
fib [i] <- fib[ i-1] + fib[i-2]
print(fib)}
for ( in in 3 : n){
fib [i] <- fib[ i-1] + fib[i-2]
print("fib")}
for ( in in 3 : n){
fib [i] <- fib[ i-1] + fib[i-2]
fib}
#6, creating the fibonacci sequence using a R for loop
n <- 20
fib <- numeric(n)
fib[1] <- 1
fib[2] <- 1
for ( in in 3 : n){
fib [i] <- fib[ i-1] + fib[i-2]
fib}
for ( in in 3 : n){
fib[i] <- fib[i-1] + fib[i-2]
fib
}
for ( i in 3 : n){
fib[i] <- fib[i-1] + fib[i-2]
fib
}
for ( i in 3 : n){
fib[i] <- fib[i-1] + fib[i-2]
print(fib)
}
#6, creating the fibonacci sequence using a R for loop
n <- 20
fib <- numeric(n)
fib[1] <- 0
fib[2] <- 1
fib[3] <- 1
for ( i in 3 : n){
fib[i] <- fib[i-1] + fib[i-2]
print(fib)
}
# Part II
# 5a creating a vector of 18 zeros
zeros <- rep.int(0,18)
zeros[1] <- 1
for (i in zeros ){
zeros <- 3*zeros
print(i)
}
for (i in 1:18 ){
newseq <- 3*zeros
print(i)
}
zeros[1] <- 1
for (i in 1:18 ){
newseq <- 3*zeros
print(newseq)
}
for (i in 1:18 ){
zeros[i] <- zeros[i-1]*3
print(newseq)
}
zeros[1] <- 1
for (i in 2:18 ){
zeros[i] <- zeros[i-1]*3
print(newseq)
}
newseq[1] <- 1
# Part II
# 5a creating a vector of 18 zeros
newseq <- rep.int(0,18)
newseq[1] <- 1
for (i in 2:18 ){
newseq[i] <- newseq[i-1]*3
print(newseq)
}
newseq[1] <- 1
for (i in 2:18 ){
newseq[i] <- newseq[i-1]+3
print(newseq)
}
# Part II
# 5a creating a vector of 18 zeros
newseq <- rep.int(0,18)
for (i in 1:18 ){
newseq[i] <- newseq[i-1]+3
print(newseq)
}
newseq[1] <- 1
for (i in 1:18 ){
newseq[i] <- newseq[i-1]+3
print(newseq)
}
for (i in 2:18 ){
newseq[i] <- newseq[i-1]+3
print(newseq)
}
newseq[1] <- 3
for (i in 2:18 ){
newseq[i] <- newseq[i-1]+3
print(newseq)
}
#5c new vector of zeros with the first vector as 1
anotherseq <- rep(0,18)
anotherseq[1] <- 1
#5c new vector of zeros with the first vector as 1
anotherseq <- rep(0,18)
anotherseq[1] <- 1
for (i in 2:18){
anotherseq[i] <- (2*anotherseq[i-1])+1
print(anotherseq)
}
for (i in 2:18 ){
newseq[i] <- newseq[i-1]*3
print(newseq)
}
newseq[1] <- 3
for (i in 2:18 ){
newseq[i] <- newseq[i-1]+3
print(newseq)
}
n <- seq[1:12]
n <- seq(1:12)
n[1] <- 2500
rm(t)
for ( t in 1:12){
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
print(n)
}
for ( t in 2:12){
n[t] <- n[t-1] + ( r * n[t-1] * (K - n[t-1])/K )
print(n)
}
#7 I saved all my data for question 4 under the vector of "n"
abundance <- n
time <- seq(1:12)
plot(time, abundance)
pop.plot <- plot(time, abundance)
print(pop.plot)
pop.plot
threshold <- 5
#Part 1 simple conditional practice
#Question 1, creating a if else statement that checks if an value is larger than 5
x <- 3
threshold <- 5
if (x > threshold){
print("Value is greater thatn 5")
}
#Part 1 simple conditional practice
#Question 1, creating a if else statement that checks if an value is larger than 5
x <- 8
threshold <- 5
if (x > threshold){
print("Value is greater thatn 5")
}
if (x > threshold){
print("Value is greater thatn 5")
}else {print("value is less than 6")}
#Part 1 simple conditional practice
#Question 1, creating a if else statement that checks if an value is larger than 5
x <- 3
threshold <- 5
if (x > threshold){
print("Value is greater thatn 5")
}else {print("value is less than 6")}
if (x > threshold){
print("Value is greater thatn 5")
}else {print("value is less than 5")}
setwd("C:/Users/TyMcC/Desktop/Comp_Bio/CompBioLabsAndHW/Labs/Lab05")
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
ExampleData <- read_csv("ExampleData.csv")
View(ExampleData)
# Changing the imported data frame into a vector so its easier to work with
example.vec <- ExampleData$y
# Changing the imported data frame into a vector so its easier to work with
example.vec <- ExampleData$x
str(example.vec)
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in 1:length(X) ) {
if ( X >= 6 ) {
print(paste("Element #",i,"of X is >= 6"))
}
X <- c(5, 4, 6.5, 8, 2.3, 6)
for ( i in 1:length(X) ) {
if ( X >= 6 ) {
print(paste("Element #",i,"of X is >= 6"))
}
for ( i in 1:length(X) ) {
if ( X >= 6 ) {
print(paste("Element #",i,"of X is >= 6"))
}
for ( i in 1:length(X) ) {
if ( X >= 6 ) {
print(paste("Element #",i,"of X is >= 6"))
}
for ( i in 1:length(X) ) {
if ( X >= 6 ) {
print(paste("Element #",i,"of X is >= 6"))
}
}
